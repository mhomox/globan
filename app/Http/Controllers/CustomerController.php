<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class CustomerController extends Controller
{

    // Display customers list
    public function index()
    {
        $customers = Customer::all();
        return view('customers.index', compact('customers'));
    }

    public function create() {

    $lastNumber = Customer::latest('id')->value('id');
    $autoGeneratedCode = 'CN-' . str_pad($lastNumber + 1, 6, '0', STR_PAD_LEFT);

        return view('customers.create', compact('autoGeneratedCode'));
    }

    public function store(Request $request) {
    $existingCustomer = Customer::where('name', $request->name)->first();

    if ($existingCustomer) {
        return redirect()->route('customers.create')
                         ->with('error', 'A customer with this name already exists.');
    }

    Customer::create($request->all());
    return redirect()->route('customers.index');
}

    public function show($id)
{
    $customer = Customer::findOrFail($id);
    return view('customers.show', compact('customer'));
}

public function edit($id)
{
    $customer = Customer::findOrFail($id);
    return view('customers.edit', compact('customer'));
}

public function update(Request $request, $id)
{
    // Validate the incoming request
    $request->validate([
        'cName' => 'required|string|max:255',
        'cCustomerType' => 'required|string',
        'cAddress' => 'required|string|max:255',
        'cCity' => 'required|string|max:100',
        'cState' => 'required|string|max:100',
        'cCountry' => 'required|string|max:100',
        'cZip' => 'required|string|max:20',
        'cContact' => 'required|string|max:255',
        'phone' => 'required|string|max:15',
        'cTel2' => 'nullable|string|max:15',
        'cFax' => 'nullable|string|max:15',
        'email' => 'required|email|max:255',
        'cEMail2' => 'nullable|email|max:255',
        'cTradeName' => 'nullable|string|max:255',
        'name' => 'nullable|string|max:255',
    ]);


    $customer = Customer::findOrFail($id);

    $customer->update($request->all());

    return redirect()->route('customers.edit', $id)->with('success', 'Customer updated successfully.');
}

public function destroy($id)
{
    Log::info("Deleting customer with ID: $id");
    $customer = Customer::find($id);

    if (!$customer) {
        return redirect()->back()->with('error', 'Customer not found.');
    }

    try {
        $customer->delete();
        return redirect()->back()->with('success', 'Customer deleted successfully.');
    } catch (\Exception $e) {
        return redirect()->back()->with('error', 'Failed to delete customer.');
    }
}

    public function submitAdd(Request $request)
{
    // Validate the incoming data
    $request->validate([
        'id' => 'nullable|numeric',
        'name' => 'nullable|string|max:255',
        'email' => 'nullable|email|max:255',
        'phone' => 'nullable|string|max:255',
        'address' => 'nullable|string|max:255',
        'cCompanyID' => 'nullable|string|max:10',
        'cCode' => 'required|string|max:15',
        'cName' => 'required|string|max:200',
        'lCompany' => 'nullable|boolean',
        'lIndividual' => 'nullable|boolean',
        'cCustomerType' => 'required|string|max:50',
        'cLastName' => 'nullable|string|max:100',
        'cFirstName' => 'nullable|string|max:100',
        'cMI' => 'nullable|string|max:100',
        'cAddress' => 'nullable|string',
        'cCity' => 'nullable|string|max:500',
        'cState' => 'nullable|string|max:50',
        'cCountry' => 'nullable|string|max:50',
        'cZip' => 'nullable|string|max:10',
        'cTel1' => 'nullable|string|max:50',
        'cTel2' => 'nullable|string|max:50',
        'cFax' => 'nullable|string|max:20',
        'cEMail1' => 'nullable|string|max:100',
        'cEMail2' => 'nullable|string|max:50',
        'cContact' => 'nullable|string|max:500',
        'cTradeName' => 'nullable|string|max:200',
        'cName2' => 'nullable|string|max:200',

    ]);

    $newCode = DB::transaction(function () {
        $lastCustomer = DB::table('customers')->lockForUpdate()->orderBy('id', 'desc')->first();

        $lastNumber = $lastCustomer ? intval(str_replace('CN-', '', $lastCustomer->cCode)) : 0;
        $newCode = 'CN-' . str_pad($lastNumber + 1, 6, '0', STR_PAD_LEFT);

        return $newCode;
    });

    $validated['cCode'] = $newCode;

    Customer::create($request->all());

    return redirect()->back()->with('success', 'Customer added successfully!');

}

public function getCustomers(Request $request)
{
    if ($request->ajax()) {
        $customers = Customer::all([
            'id', 'name', 'email', 'phone', 'address',
            'cCompanyID', 'cCode', 'cName', 'lCompany',
            'lIndividual', 'cCustomerType', 'cLastName',
            'cFirstName', 'cMI', 'cAddress', 'cCity',
            'cState', 'cCountry', 'cZip', 'cTel1', 'cTel2',
            'cFax', 'cEMail1', 'cEMail2', 'cContact',
            'cTradeName', 'cName2', 'cContact', 'created_at', 'updated_at',
        ]);
        return response()->json($customers);
    }

    return abort(403, 'Unauthorized access.');
}

public function getCustomerById($id)
{
    $customer = Customer::find($id);
    if ($customer) {
        return response()->json([
            'cName' => $customer->cName,
            'cCode' => $customer->cCode,
            'cAddress' => $customer->cAddress,
        ]);
    }
    return response()->json(['error' => 'Customer not found'], 404);
}

}
